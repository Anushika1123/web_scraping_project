import os
import time
import requests
from bs4 import BeautifulSoup
import mysql.connector
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import re

class HikvisionFirmware:
    def __init__(self, html_file_path):
        self.html_file_path = html_file_path
        self.html_content = None
        self.model_firmware_list = []

        self.db_connection = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Sanushika@2930',
            database='company_data'
        )

        self.create_table()

    def create_table(self):
        cursor = self.db_connection.cursor()

        sql_query = """
        CREATE TABLE IF NOT EXISTS hikvision_1 (
            model VARCHAR(255),
            firmware VARCHAR(255),
            file_path VARCHAR(255),
            status VARCHAR(10)
        )
        """
        
        try:
            cursor.execute(sql_query)
            self.db_connection.commit()
            print("Table created successfully")
        except mysql.connector.Error as error:
            print("Failed to create table:", error)
        finally:
            cursor.close()

    def create_folder(self, folder_path):
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
            print(f"Folder created successfully: {folder_path}")

    def sanitize_folder_name(self, folder_name):
        return re.sub(r'[\\/*?:"<>|]', '', folder_name)

    def load_html_content(self):
        with open(self.html_file_path, "r", encoding="utf-8") as file:
            self.html_content = file.read()

    def parse_html(self):
        if not self.html_content:
            self.load_html_content()

        soup = BeautifulSoup(self.html_content, 'html.parser')
        main_items = soup.find_all('div', class_='nav-item')

        for item in main_items:
            try:
                model_element = item.find("ul", class_="sub-list").find("li", class_="sub-item")
                model = model_element.text.strip()

                firmware_element = item.find("a", class_="assets")
                firmware = firmware_element["data-title"]

                link_element = item.find('a', class_='link')
                model_link1 = link_element['href']
                model_link = "https://www.hikvision.com" + str(model_link1)

                # Check if the model is EOL or active
                eol_tag = model_element.find("span", class_="tag-eol")
                status = "EOL" if eol_tag else "Active"

                model_firmware_pair = {"model": model, "firmware": firmware, "model_link": model_link, "status": status}

                self.model_firmware_list.append(model_firmware_pair)
            except AttributeError as e:
                print(f"Error occurred while processing item: {e}")

    def process_model(self, model_link, firmware, model_folder):
        chrome_options = webdriver.ChromeOptions()
        download_path = os.path.join("D:\Redinent\HIKVISION", model_folder)
        prefs = {
            "download.default_directory": download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)

        chrome_driver_path = r"C:\Users\sinha\OneDrive\Desktop\Selenium\chromedriver.exe"                                           

        driver = webdriver.Chrome(executable_path=chrome_driver_path, options=chrome_options)

        driver.get(model_link)

        wait = WebDriverWait(driver, 10)

        try:

            element_to_click = wait.until(EC.element_to_be_clickable((By.XPATH, f"//div[contains(text(), '{firmware}')]")))
            print("Element to click:", element_to_click.text)

            driver.execute_script("arguments[0].click();", element_to_click)

            new_window_handle = driver.window_handles[-1]
            driver.switch_to.window(new_window_handle)

            agree_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='agree a-download-href']")))
            print("Agree button found:", agree_button.text)

            driver.execute_script("arguments[0].click();", agree_button)
            time.sleep(70)

            files = os.listdir(download_path)
            if files:
                file_path = os.path.join(download_path, files[0])  
                print(f"File found in directory: {file_path}")
                driver.quit()
                return file_path
            else:
                print("No files found in directory.")
                driver.quit()
                return None
        except TimeoutException:
            print("TimeoutException: Could not click on element. Skipping this model.")
            driver.quit()
            return None

    def insert_into_database(self, model, firmware, file_path, status):
        print("Inserting data into database")
        print("Model:", model)
        print("Firmware:", firmware)
        print("File Path:", file_path)
        cursor = self.db_connection.cursor()

        sql_query = "INSERT INTO hikvision_1 (model, firmware, file_path, status) VALUES (%s, %s, %s, %s)"
        values = (model, firmware, file_path, status)

        try:
            print("Inserting data into database:", values)
            cursor.execute(sql_query, values)
            self.db_connection.commit()
            print("Inserted into database successfully:", model, firmware, file_path)  
        except mysql.connector.Error as error:
            print("Failed to insert into database:", error)
        except Exception as e:
            print("An error occurred during database insertion:", e)
        finally:
            cursor.close()

    def download_firmware(self):
        self.parse_html()
        for model_info in self.model_firmware_list:
            model_link = model_info["model_link"]
            firmware = model_info["firmware"]
            model_folder = self.sanitize_folder_name(model_info["model"])
            status = model_info["status"]

            file_path = self.process_model(model_link, firmware, model_folder)
            if file_path:
                self.insert_into_database(model_folder, firmware, file_path, status)

        print("All firmware downloaded and inserted into the database.")

    def get_firmware_details(self):
        self.parse_html()
        return self.model_firmware_list
    
    def check_model_status(self, url):
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            product_search = soup.find('div', class_='product-list-search')
            if product_search:
                input_field = product_search.find('input', class_='product-search')
                if input_field:
                    search_value = input_field['data-searchval']
                    if search_value:
                        eol_tag = soup.find('span', class_='tag-eol')
                        if eol_tag:
                            print("EOL")
                        else:
                            print("Active")
        else:
            print("Failed to fetch URL")

if __name__ == "__main__":
    hikvision_firmware = HikvisionFirmware("firmware.html")
    hikvision_firmware.download_firmware()
    url = "https://www.hikvision.com/en/products/discontinued-products/?checkedSubSeries=null"
    hikvision_firmware.check_model_status(url)
